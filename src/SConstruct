import os
import fnmatch
import subprocess

external_dir = os.path.abspath('external')
install_dir = os.path.abspath(os.path.join(os.pardir, 'bin'))

boost_version = '1.55.0'
boost_basename = 'boost_1_55_0'

boost_url = 'http://downloads.sourceforge.net/project/boost/boost/' + boost_version + '/' + boost_basename + '.tar.gz'
boost_tgz_filename = boost_basename + '.tar.gz'
boost_dir = os.path.join(external_dir, boost_basename)
boost_sentinal = os.path.join(boost_dir, 'sentinal')

if not os.path.exists(boost_sentinal):
    subprocess.check_call('wget -c ' + boost_url, shell=True)
    subprocess.check_call('tar -C ' + external_dir + ' -xzvf ' + boost_tgz_filename, shell=True)
    os.remove(boost_tgz_filename)
    with open(boost_sentinal, 'w'):
        pass

env = Environment(ENV=os.environ)

common_sources = """
    Common.cpp
    DebugCheck.cpp
""".split()

bamtools_dir = os.path.join(external_dir, 'bamtools', 'src')
bamtools_api_dir = os.path.join(bamtools_dir, 'api')
bamtools_utils_dir = os.path.join(bamtools_dir, 'utils')

def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)
                yield filename

bamtools_sources = []
bamtools_sources += list(find_files(bamtools_api_dir, '*.cpp'))
bamtools_sources += list(find_files(bamtools_utils_dir, '*.cpp'))
bamtools_sources = filter(lambda a: not a.endswith('win_p.cpp'), bamtools_sources)

boost_iostreams_sources = list(find_files(os.path.join(boost_dir, 'libs/iostreams/src'), '*.cpp'))
boost_serialization_sources = list(find_files(os.path.join(boost_dir, 'libs/serialization/src'), '*.cpp'))

tclap_dir = os.path.join(external_dir, 'tclap', 'include')

env.Append(CPPPATH=[external_dir, bamtools_dir, boost_dir, tclap_dir])
env.Append(LIBS=['z', 'bz2'])
env.Append(CCFLAGS='-O3')
env.Append(CCFLAGS='-g')

sources = """
    AlignmentRecord.cpp
    MatePairGibbs.cpp
    asa136.cpp
    asa241.cpp
    ../external/Triangle/triangle.c
    mclustermatepairs.cpp
""".split()
env.Program(target='mclustermatepairs', source=common_sources+sources)
env.Install(install_dir, 'mclustermatepairs')

sources = """
    AlignmentRecord.cpp
    setcover.cpp
""".split()
env.Program(target='setcover', source=common_sources+sources)
env.Install(install_dir, 'setcover')

sources = """
    realign2.cpp
    AlignmentProbability.cpp
    AlignmentStream.cpp
    AlignmentRecord.cpp
    ReadStream.cpp
    Sequences.cpp
    SimpleAligner.cpp
""".split()
env.Program(target='realign2', source=common_sources+sources)
env.Install(install_dir, 'realign2')

sources = """
    realigntobreaks2.cpp
    AlignmentRecord.cpp
    ReadStream.cpp
    Sequences.cpp
    SimpleAligner.cpp
""".split()
env.Program(target='realigntobreaks2', source=common_sources+sources)
env.Install(install_dir, 'realigntobreaks2')

sources = """
    AlignmentStream.cpp
    ReadStream.cpp
    Sequences.cpp
    testsplit.cpp
""".split()
env.Program(target='testsplit', source=common_sources+sources)
env.Install(install_dir, 'testsplit')

sources = """
    aligntrue.cpp
    AlignmentStream.cpp
    ReadStream.cpp
    Sequences.cpp
    SimpleAligner.cpp
""".split()
env.Program(target='aligntrue', source=common_sources+sources)
env.Install(install_dir, 'aligntrue')

sources = """
    ShortestPath.cpp
    AlignmentRecord.cpp
    cycles.cpp
""".split()
env.Program(target='cycles', source=common_sources+sources)
env.Install(install_dir, 'cycles')

sources = """
    AlignmentRecord.cpp
    RegionDB.cpp
    filterreads.cpp
""".split()
env.Program(target='filterreads', source=common_sources+sources)
env.Install(install_dir, 'filterreads')

sources = """
    SimpleAligner.cpp
    testssealign.cpp
""".split()
env.Program(target='testssealign', source=common_sources+sources)
env.Install(install_dir, 'testssealign')

sources = """
    samplefastq.cpp
""".split()
env.Program(target='samplefastq', source=common_sources+sources)
env.Install(install_dir, 'samplefastq')

sources = """
    bamdiscordantfastq.cpp
""".split()
env.Program(target='bamdiscordantfastq', source=common_sources+bamtools_sources+sources+
    boost_iostreams_sources+boost_serialization_sources)
env.Install(install_dir, 'bamdiscordantfastq')

sources = """
    bamsamplefastq.cpp
""".split()
env.Program(target='bamsamplefastq', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bamsamplefastq')

sources = """
    bamfastq.cpp
""".split()
env.Program(target='bamfastq', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bamfastq')

sources = """
    bamextractsimreads.cpp
    Sequences.cpp
""".split()
env.Program(target='bamextractsimreads', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bamextractsimreads')

sources = """
    bampartition.cpp
    Sequences.cpp
""".split()
env.Program(target='bampartition', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bampartition')

sources = """
    bamreheader.cpp
""".split()
env.Program(target='bamreheader', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bamreheader')

sources = """
    bammixture.cpp
""".split()
env.Program(target='bammixture', source=common_sources+bamtools_sources+sources)
env.Install(install_dir, 'bammixture')

env.Alias('install', [install_dir])

